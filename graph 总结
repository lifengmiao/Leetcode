图的遍历：
1. 全联通图 vs 非全联通图
对于全联通图，dfs可以任意起点；对于非全联通图，dfs要遍历所有点作为起点（course schdule）
2. 判断有环
建立visit，dfs每进一个点，先看visit［i］是否为 1，如果为1，说明有环；如果不是1， visit［i］付值1，遍历i的neighbors
3. 判断全联通
dfs从任意一点出发，用visit记录每个点的访问与否，最后过一遍visit，如果有没有访问的点，即非全通


表示graph的方法：
1. 带neighbor的node： UndirectedGraphNode* node
 struct UndirectedGraphNode {
     int label;
     vector<UndirectedGraphNode *> neighbors;
     UndirectedGraphNode(int x) : label(x) {};
 };
 
 2. graph的所有边：set<pair<char, char>> edges; vector<pair<int, int>> edges
 
 3. graph的所有链接：
    unordered_map<char, vector<char>> graph; 
    vector<vector<int>> graph(numCourses, vector<int>);
    unordered_map<string, multiset<string>> m; //用multiset，可以自动排序
    所有链接可以由所有边生成：
    for (auto a : edges) {
            graph[a.first].push_back(a.second); 
        }
        
 有向图检查是否有环：
 1. DFS：用visit三个状态表示 0－－未访问；1－－已访问；－1－－正在访问
 当前访问节点 visit＝－1， 如果深层访问节点 visit＝＝－1，说明回到祖先节点，有环
 
 2. BFS：整个遍历完成后，如果仍有入度不为0的节点，说明有环； 
 
 遍历边：有环的graph：Reconstruct Itinerary 每访问一个neighbor把其从neighbors中删除，出度为0，加入result
 
 遍历点：无环的graph：Alien Dictionary 使用拓扑排序，BFS，关键是入度
  
        有环的graph：Evaluate Division 遇到环跳过 DFS
 
无向图检查全联通和是否有环：Graph Valid Tree
1. DFS：可以从任意点起始，因为如果全联通，从任何点开始都能遍历所有点。需要pre表示前一个访问的点，确保不走回头路。注意和course schedule的不同，course 
schedule不要求全联通，只要没门课都能完成就好，可以有多个不相连接tree， 所以必须扫描每一个点作为起始点；而graph valid tree只需扫描一个点

2. BFS：遍历到一个neighbor需要把从neighbor返回当前节点的edge删除

3. UF：遍历每条边，如果其root相同，说明之前存在链接，现在又链接，所以有环；如果不相同，把其root链接


带weight的有向图，从起点到终点最短距离：Network Delay Time
1. BFS： 用vector<int> distance存从起点到每个点的距离，每次扫描到该点，更新此距离。注意和Evaluate Division的区别，后者不需要用vector存distance，
         以为任意路径到该点的distance（除法结果）都一样，所以用一个值存就可以了。
         每一层存一个visit，避免重复加点到queue中
         
